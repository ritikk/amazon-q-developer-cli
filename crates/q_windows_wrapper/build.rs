use std::path::Path;
use std::{
    env,
    fs,
};

fn main() {
    // Only run this logic on Windows
    if env::var("CARGO_CFG_TARGET_OS").unwrap() == "windows" {
        println!("cargo:rustc-cfg=windows");

        // Tell Cargo to re-run this script if build.rs changes
        println!("cargo:rerun-if-changed=build.rs");

        // Get the output directory
        let out_dir = env::var("OUT_DIR").unwrap();
        let dest_path = Path::new(&out_dir).join("windows_config.rs");

        // Write Windows-specific configuration
        fs::write(
            &dest_path,
            r#"
            // This file is generated by build.rs
            
            /// The default installation locations for the Q CLI on Windows
            pub const DEFAULT_INSTALL_LOCATIONS: &[&str] = &[
                "%ProgramFiles%\\Amazon\\Q\\bin\\q_cli.exe",
                "%ProgramFiles(x86)%\\Amazon\\Q\\bin\\q_cli.exe",
                "%LOCALAPPDATA%\\Amazon\\Q\\bin\\q_cli.exe",
            ];
            
            /// The environment variable name for specifying a custom Q CLI path
            pub const Q_CLI_PATH_ENV_VAR: &str = "Q_CLI_PATH";
            
            /// The environment variable name for enabling verbose logging
            pub const VERBOSE_LOGGING_ENV_VAR: &str = "Q_WRAPPER_VERBOSE";
            "#,
        )
        .unwrap();
    }
}
